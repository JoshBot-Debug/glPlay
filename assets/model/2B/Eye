


uniform vec4 g_screenParams;
uniform vec3 eyePosition;
uniform mat4 worldViewProjection;
uniform mat4 world;
uniform mat4 view;
uniform mat4 projection;
uniform vec4 g_lightColor;
uniform vec4 g_lightVec;
uniform vec4 g_FogParam;
uniform vec4 g_FogColor;
uniform vec4 g_R_Coeffs;
uniform vec4 g_G_Coeffs;
uniform vec4 g_B_Coeffs;
uniform float _ApplyGreyscale;
uniform float g_UseNormalMap;
uniform float g_bAlbedoOverWrite;
uniform float g_bGlossinessOverWrite;
uniform float g_bMetalicOverWrite;
uniform vec3 g_AlbedoColor;
uniform float g_Glossiness;
uniform float g_GlossinessIris;
uniform float g_Metallic;
uniform float g_MetallicIris;
uniform float g_ParallaxStrength;
uniform float g_LightIrisIntensity;
uniform float g_ReflectionIntensity;

attribute vec3 position;
attribute vec4 tangent;
attribute vec2 uv;
attribute vec2 uv2;
attribute vec3 normal;
varying vec4 IN_texcoords;
varying vec4 IN_worldPos;
varying vec4 IN_normal;
varying vec4 IN_tangent;
varying vec4 IN_bitangent;
varying vec4 IN_extraCoord;
vec2 g_TileCB;

void main()
{
    g_TileCB = vec2(1.0);
    vec4 _489 = vec4(position, 1.0);
    vec4 _497 = world * _489;
    float _499 = _497.x;
    vec3 _515 = normalize(normal * mat3(vec4(world[0][0], world[1][0], world[2][0], world[3][0]).xyz, vec4(world[0][1], world[1][1], world[2][1], world[3][1]).xyz, vec4(world[0][2], world[1][2], world[2][2], world[3][2]).xyz));
    vec3 _529 = normalize(tangent.xyz * mat3(vec4(world[0][0], world[1][0], world[2][0], world[3][0]).xyz, vec4(world[0][1], world[1][1], world[2][1], world[3][1]).xyz, vec4(world[0][2], world[1][2], world[2][2], world[3][2]).xyz));
    vec3 _535 = cross(_529, _515) * tangent.w;
    vec3 _461 = (eyePosition - vec3(_499, _497.yz)) * mat3(_529, _535, _515);
    vec2 _467 = _461.xy / vec2(_461.z);
    vec4 _756 = vec4(0.0);
    _756.x = _467.x;
    vec4 _758 = _756;
    _758.y = _467.y;
    gl_Position = worldViewProjection * _489;
    IN_texcoords = vec4(uv * g_TileCB, uv2);
    IN_worldPos = vec4(_499, _497.yz, 1.0);
    IN_normal = vec4(_515, 0.0);
    IN_tangent = vec4(_529, 1.0);
    IN_bitangent = vec4(_535, 0.0);
    IN_extraCoord = _758;
}

